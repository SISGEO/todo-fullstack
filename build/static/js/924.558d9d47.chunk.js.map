{"version":3,"file":"static/js/924.558d9d47.chunk.js","mappings":"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","sources":["services/checklistService.ts","pages/Projects/index.tsx"],"sourcesContent":["import { Checklist, ChecklistItem, Project, ChecklistTemplate, ChecklistStats } from '../types/checklist';\r\n\r\n// Simulando um banco de dados em memória\r\nconst checklists: Checklist[] = [];\r\nconst projects: Project[] = [];\r\nconst templates: ChecklistTemplate[] = [];\r\n\r\nexport const checklistService = {\r\n  // Projetos\r\n  async createProject(project: Omit<Project, 'id'>): Promise<Project> {\r\n    const newProject = { ...project, id: Math.random().toString() };\r\n    projects.push(newProject);\r\n    return newProject;\r\n  },\r\n\r\n  async getProjects(companyId: string): Promise<Project[]> {\r\n    return projects.filter(p => p.companyId === companyId);\r\n  },\r\n\r\n  async updateProject(id: string, data: Partial<Project>): Promise<Project> {\r\n    const index = projects.findIndex(p => p.id === id);\r\n    if (index === -1) throw new Error('Projeto não encontrado');\r\n    \r\n    projects[index] = { ...projects[index], ...data };\r\n    return projects[index];\r\n  },\r\n\r\n  // Checklists\r\n  async createChecklist(checklist: Omit<Checklist, 'id'>): Promise<Checklist> {\r\n    const newChecklist = { ...checklist, id: Math.random().toString() };\r\n    checklists.push(newChecklist);\r\n    return newChecklist;\r\n  },\r\n\r\n  async getChecklists(projectId: string): Promise<Checklist[]> {\r\n    return checklists.filter(c => c.projectId === projectId);\r\n  },\r\n\r\n  async updateChecklist(id: string, data: Partial<Checklist>): Promise<Checklist> {\r\n    const index = checklists.findIndex(c => c.id === id);\r\n    if (index === -1) throw new Error('Checklist não encontrado');\r\n    \r\n    checklists[index] = { ...checklists[index], ...data };\r\n    return checklists[index];\r\n  },\r\n\r\n  async updateChecklistItem(\r\n    checklistId: string,\r\n    itemId: string,\r\n    data: Partial<ChecklistItem>\r\n  ): Promise<ChecklistItem> {\r\n    const checklist = checklists.find(c => c.id === checklistId);\r\n    if (!checklist) throw new Error('Checklist não encontrado');\r\n\r\n    const itemIndex = checklist.items.findIndex(i => i.id === itemId);\r\n    if (itemIndex === -1) throw new Error('Item não encontrado');\r\n\r\n    checklist.items[itemIndex] = { ...checklist.items[itemIndex], ...data };\r\n    return checklist.items[itemIndex];\r\n  },\r\n\r\n  // Templates\r\n  async createTemplate(template: Omit<ChecklistTemplate, 'id'>): Promise<ChecklistTemplate> {\r\n    const newTemplate = { ...template, id: Math.random().toString() };\r\n    templates.push(newTemplate);\r\n    return newTemplate;\r\n  },\r\n\r\n  async getTemplates(companyId: string): Promise<ChecklistTemplate[]> {\r\n    return templates.filter(t => t.companyId === companyId);\r\n  },\r\n\r\n  // Estatísticas\r\n  async getStats(projectId: string): Promise<ChecklistStats> {\r\n    const projectChecklists = checklists.filter(c => c.projectId === projectId);\r\n    \r\n    return {\r\n      total: projectChecklists.length,\r\n      completed: projectChecklists.filter(c => c.status === 'completed').length,\r\n      pending: projectChecklists.filter(c => c.status === 'pending').length,\r\n      nonCompliant: projectChecklists.filter(c => c.status === 'non_compliant').length,\r\n    };\r\n  },\r\n}; ","import React, { useEffect, useState } from 'react';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { checklistService } from '../../services/checklistService';\r\nimport { Project } from '../../types/checklist';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Projects: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const [projects, setProjects] = useState<Project[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [newProject, setNewProject] = useState({\r\n    name: '',\r\n    description: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadProjects();\r\n  }, [user]);\r\n\r\n  const loadProjects = async () => {\r\n    try {\r\n      if (user?.companyId) {\r\n        const data = await checklistService.getProjects(user.companyId);\r\n        setProjects(data);\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao carregar projetos');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreateProject = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (!user?.companyId) {\r\n        toast.error('Usuário não está associado a uma empresa');\r\n        return;\r\n      }\r\n\r\n      await checklistService.createProject({\r\n        name: newProject.name,\r\n        description: newProject.description,\r\n        companyId: user.companyId,\r\n        status: 'active',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      });\r\n\r\n      setNewProject({ name: '', description: '' });\r\n      toast.success('Projeto criado com sucesso!');\r\n      loadProjects();\r\n    } catch (error) {\r\n      toast.error('Erro ao criar projeto');\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div>Carregando...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"sm:flex sm:items-center\">\r\n        <div className=\"sm:flex-auto\">\r\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Projetos</h1>\r\n          <p className=\"mt-2 text-sm text-gray-700\">\r\n            Lista de todos os projetos da sua empresa\r\n          </p>\r\n        </div>\r\n        <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto\"\r\n            onClick={() => document.getElementById('new-project-modal')?.classList.remove('hidden')}\r\n          >\r\n            Novo Projeto\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Lista de Projetos */}\r\n      <div className=\"mt-8 flex flex-col\">\r\n        <div className=\"-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8\">\r\n          <div className=\"inline-block min-w-full py-2 align-middle md:px-6 lg:px-8\">\r\n            <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg\">\r\n              <table className=\"min-w-full divide-y divide-gray-300\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    <th\r\n                      scope=\"col\"\r\n                      className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\"\r\n                    >\r\n                      Nome\r\n                    </th>\r\n                    <th\r\n                      scope=\"col\"\r\n                      className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\"\r\n                    >\r\n                      Descrição\r\n                    </th>\r\n                    <th\r\n                      scope=\"col\"\r\n                      className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\"\r\n                    >\r\n                      Status\r\n                    </th>\r\n                    <th\r\n                      scope=\"col\"\r\n                      className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\"\r\n                    >\r\n                      Criado em\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"divide-y divide-gray-200 bg-white\">\r\n                  {projects.map((project) => (\r\n                    <tr key={project.id}>\r\n                      <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6\">\r\n                        {project.name}\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\r\n                        {project.description}\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\r\n                        {project.status}\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\r\n                        {new Date(project.createdAt).toLocaleDateString()}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal de Novo Projeto */}\r\n      <div id=\"new-project-modal\" className=\"hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center\">\r\n        <div className=\"bg-white rounded-lg p-8 max-w-md w-full\">\r\n          <h2 className=\"text-lg font-medium mb-4\">Novo Projeto</h2>\r\n          <form onSubmit={handleCreateProject}>\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\r\n                  Nome\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  value={newProject.name}\r\n                  onChange={(e) => setNewProject({ ...newProject, name: e.target.value })}\r\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700\">\r\n                  Descrição\r\n                </label>\r\n                <textarea\r\n                  id=\"description\"\r\n                  value={newProject.description}\r\n                  onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}\r\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\r\n                  rows={3}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-6 flex justify-end space-x-3\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => document.getElementById('new-project-modal')?.classList.add('hidden')}\r\n                className=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\r\n              >\r\n                Cancelar\r\n              </button>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\r\n              >\r\n                Criar\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects; "],"names":["checklists","projects","templates","checklistService","createProject","project","newProject","id","Math","random","toString","push","async","getProjects","companyId","filter","p","updateProject","data","index","findIndex","Error","createChecklist","checklist","newChecklist","getChecklists","projectId","c","updateChecklist","updateChecklistItem","checklistId","itemId","find","itemIndex","items","i","createTemplate","template","newTemplate","getTemplates","t","getStats","projectChecklists","total","length","completed","status","pending","nonCompliant","Projects","user","useAuth","setProjects","useState","isLoading","setIsLoading","setNewProject","name","description","useEffect","loadProjects","error","toast","_jsx","children","_jsxs","className","type","onClick","_document$getElementB","document","getElementById","classList","remove","scope","map","Date","createdAt","toLocaleDateString","onSubmit","e","preventDefault","updatedAt","success","htmlFor","value","onChange","target","required","rows","_document$getElementB2","add"],"sourceRoot":""}