{"version":3,"file":"static/js/957.0a1613bb.chunk.js","mappings":"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","sources":["services/checklistService.ts","pages/Checklists/index.tsx"],"sourcesContent":["import { Checklist, ChecklistItem, Project, ChecklistTemplate, ChecklistStats } from '../types/checklist';\r\n\r\n// Simulando um banco de dados em memória\r\nconst checklists: Checklist[] = [];\r\nconst projects: Project[] = [];\r\nconst templates: ChecklistTemplate[] = [];\r\n\r\nexport const checklistService = {\r\n  // Projetos\r\n  async createProject(project: Omit<Project, 'id'>): Promise<Project> {\r\n    const newProject = { ...project, id: Math.random().toString() };\r\n    projects.push(newProject);\r\n    return newProject;\r\n  },\r\n\r\n  async getProjects(companyId: string): Promise<Project[]> {\r\n    return projects.filter(p => p.companyId === companyId);\r\n  },\r\n\r\n  async updateProject(id: string, data: Partial<Project>): Promise<Project> {\r\n    const index = projects.findIndex(p => p.id === id);\r\n    if (index === -1) throw new Error('Projeto não encontrado');\r\n    \r\n    projects[index] = { ...projects[index], ...data };\r\n    return projects[index];\r\n  },\r\n\r\n  // Checklists\r\n  async createChecklist(checklist: Omit<Checklist, 'id'>): Promise<Checklist> {\r\n    const newChecklist = { ...checklist, id: Math.random().toString() };\r\n    checklists.push(newChecklist);\r\n    return newChecklist;\r\n  },\r\n\r\n  async getChecklists(projectId: string): Promise<Checklist[]> {\r\n    return checklists.filter(c => c.projectId === projectId);\r\n  },\r\n\r\n  async updateChecklist(id: string, data: Partial<Checklist>): Promise<Checklist> {\r\n    const index = checklists.findIndex(c => c.id === id);\r\n    if (index === -1) throw new Error('Checklist não encontrado');\r\n    \r\n    checklists[index] = { ...checklists[index], ...data };\r\n    return checklists[index];\r\n  },\r\n\r\n  async updateChecklistItem(\r\n    checklistId: string,\r\n    itemId: string,\r\n    data: Partial<ChecklistItem>\r\n  ): Promise<ChecklistItem> {\r\n    const checklist = checklists.find(c => c.id === checklistId);\r\n    if (!checklist) throw new Error('Checklist não encontrado');\r\n\r\n    const itemIndex = checklist.items.findIndex(i => i.id === itemId);\r\n    if (itemIndex === -1) throw new Error('Item não encontrado');\r\n\r\n    checklist.items[itemIndex] = { ...checklist.items[itemIndex], ...data };\r\n    return checklist.items[itemIndex];\r\n  },\r\n\r\n  // Templates\r\n  async createTemplate(template: Omit<ChecklistTemplate, 'id'>): Promise<ChecklistTemplate> {\r\n    const newTemplate = { ...template, id: Math.random().toString() };\r\n    templates.push(newTemplate);\r\n    return newTemplate;\r\n  },\r\n\r\n  async getTemplates(companyId: string): Promise<ChecklistTemplate[]> {\r\n    return templates.filter(t => t.companyId === companyId);\r\n  },\r\n\r\n  // Estatísticas\r\n  async getStats(projectId: string): Promise<ChecklistStats> {\r\n    const projectChecklists = checklists.filter(c => c.projectId === projectId);\r\n    \r\n    return {\r\n      total: projectChecklists.length,\r\n      completed: projectChecklists.filter(c => c.status === 'completed').length,\r\n      pending: projectChecklists.filter(c => c.status === 'pending').length,\r\n      nonCompliant: projectChecklists.filter(c => c.status === 'non_compliant').length,\r\n    };\r\n  },\r\n}; ","import React, { useEffect, useState } from 'react';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { checklistService } from '../../services/checklistService';\r\nimport { Checklist } from '../../types/checklist';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Checklists: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const [checklists, setChecklists] = useState<Checklist[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    loadChecklists();\r\n  }, []);\r\n\r\n  const loadChecklists = async () => {\r\n    try {\r\n      // Por enquanto, vamos usar um ID fixo para demonstração\r\n      const data = await checklistService.getChecklists('1');\r\n      setChecklists(data);\r\n    } catch (error) {\r\n      toast.error('Erro ao carregar checklists');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateChecklistItem = async (\r\n    checklistId: string,\r\n    itemId: string,\r\n    completed: boolean\r\n  ) => {\r\n    try {\r\n      await checklistService.updateChecklistItem(checklistId, itemId, {\r\n        completed,\r\n        completedAt: completed ? new Date() : null,\r\n      });\r\n      toast.success('Item atualizado com sucesso!');\r\n      loadChecklists();\r\n    } catch (error) {\r\n      toast.error('Erro ao atualizar item');\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div>Carregando...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"sm:flex sm:items-center\">\r\n        <div className=\"sm:flex-auto\">\r\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Checklists</h1>\r\n          <p className=\"mt-2 text-sm text-gray-700\">\r\n            Lista de todos os checklists do projeto\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-8 flow-root\">\r\n        <div className=\"-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\r\n          <div className=\"inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8\">\r\n            <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg\">\r\n              <table className=\"min-w-full divide-y divide-gray-300\">\r\n                <thead className=\"bg-gray-50\">\r\n                  <tr>\r\n                    <th\r\n                      scope=\"col\"\r\n                      className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\"\r\n                    >\r\n                      Nome\r\n                    </th>\r\n                    <th\r\n                      scope=\"col\"\r\n                      className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\"\r\n                    >\r\n                      Status\r\n                    </th>\r\n                    <th\r\n                      scope=\"col\"\r\n                      className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\"\r\n                    >\r\n                      Progresso\r\n                    </th>\r\n                    <th\r\n                      scope=\"col\"\r\n                      className=\"relative py-3.5 pl-3 pr-4 sm:pr-6\"\r\n                    >\r\n                      <span className=\"sr-only\">Ações</span>\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"divide-y divide-gray-200 bg-white\">\r\n                  {checklists.map((checklist) => (\r\n                    <tr key={checklist.id}>\r\n                      <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6\">\r\n                        {checklist.name}\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\r\n                        {checklist.status}\r\n                      </td>\r\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\r\n                        {Math.round(\r\n                          (checklist.items.filter((item) => item.completed).length /\r\n                            checklist.items.length) *\r\n                            100\r\n                        )}\r\n                        %\r\n                      </td>\r\n                      <td className=\"relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6\">\r\n                        <button\r\n                          onClick={() =>\r\n                            document\r\n                              .getElementById(`checklist-${checklist.id}`)\r\n                              ?.classList.remove('hidden')\r\n                          }\r\n                          className=\"text-indigo-600 hover:text-indigo-900\"\r\n                        >\r\n                          Ver detalhes\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modais de Detalhes */}\r\n      {checklists.map((checklist) => (\r\n        <div\r\n          key={`modal-${checklist.id}`}\r\n          id={`checklist-${checklist.id}`}\r\n          className=\"hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center\"\r\n        >\r\n          <div className=\"bg-white rounded-lg p-8 max-w-2xl w-full\">\r\n            <div className=\"flex justify-between items-center mb-6\">\r\n              <h2 className=\"text-lg font-medium\">{checklist.name}</h2>\r\n              <button\r\n                onClick={() =>\r\n                  document\r\n                    .getElementById(`checklist-${checklist.id}`)\r\n                    ?.classList.add('hidden')\r\n                }\r\n                className=\"text-gray-400 hover:text-gray-500\"\r\n              >\r\n                <span className=\"sr-only\">Fechar</span>\r\n                <svg\r\n                  className=\"h-6 w-6\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M6 18L18 6M6 6l12 12\"\r\n                  />\r\n                </svg>\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"space-y-4\">\r\n              {checklist.items.map((item) => (\r\n                <div\r\n                  key={item.id}\r\n                  className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\r\n                >\r\n                  <div className=\"flex items-center\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={item.completed}\r\n                      onChange={(e) =>\r\n                        handleUpdateChecklistItem(\r\n                          checklist.id,\r\n                          item.id,\r\n                          e.target.checked\r\n                        )\r\n                      }\r\n                      className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\r\n                    />\r\n                    <span className=\"ml-3 text-sm text-gray-900\">\r\n                      {item.description}\r\n                    </span>\r\n                  </div>\r\n                  {item.completed && item.completedAt && (\r\n                    <span className=\"text-xs text-gray-500\">\r\n                      Concluído em{' '}\r\n                      {new Date(item.completedAt).toLocaleDateString()}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checklists; "],"names":["checklists","projects","templates","checklistService","createProject","project","newProject","id","Math","random","toString","push","async","getProjects","companyId","filter","p","updateProject","data","index","findIndex","Error","createChecklist","checklist","newChecklist","getChecklists","projectId","c","updateChecklist","updateChecklistItem","checklistId","itemId","find","itemIndex","items","i","createTemplate","template","newTemplate","getTemplates","t","getStats","projectChecklists","total","length","completed","status","pending","nonCompliant","Checklists","user","useAuth","setChecklists","useState","isLoading","setIsLoading","useEffect","loadChecklists","error","toast","_jsx","children","_jsxs","className","scope","map","name","round","item","onClick","_document$getElementB","document","getElementById","classList","remove","_document$getElementB2","add","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","type","checked","onChange","e","completedAt","Date","success","handleUpdateChecklistItem","target","description","toLocaleDateString"],"sourceRoot":""}